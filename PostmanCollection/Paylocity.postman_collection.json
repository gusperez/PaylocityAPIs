{
	"info": {
		"_postman_id": "4f9a4419-3c01-4ada-bcd5-ac9301908d19",
		"name": "Paylocity",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "3282269"
	},
	"item": [
		{
			"name": "Get Employee List",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Get Employee List",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    if(Array.isArray(jsonData) && jsonData.length > 0){\r",
											"        jsonData.forEach((item) => {\r",
											"            pm.expect(item.partitionKey).not.null;\r",
											"            pm.expect(item.partitionKey).to.be.a(\"string\");\r",
											"            pm.expect(item.sortKey).not.null;\r",
											"            pm.expect(item.sortKey).to.be.a(\"string\");\r",
											"            pm.expect(item.username).not.null;\r",
											"            pm.expect(item.username).to.be.a(\"string\");\r",
											"            pm.expect(item.id).not.null;\r",
											"            pm.expect(item.id).to.be.a(\"string\");\r",
											"            pm.expect(item.firstName).not.null;\r",
											"            pm.expect(item.firstName).to.be.a(\"string\");\r",
											"            pm.expect(item.lastName).not.null;\r",
											"            pm.expect(item.lastName).to.be.a(\"string\");\r",
											"            pm.expect(item.dependants).not.null;\r",
											"            pm.expect(item.dependants).to.be.an(\"number\");\r",
											"            pm.expect(item.expiration).not.null;\r",
											"            pm.expect(item.expiration).to.be.a(\"string\");\r",
											"            pm.expect(item.salary).not.null;\r",
											"            pm.expect(item.salary).to.be.an(\"number\");\r",
											"            pm.expect(item.salary).to.eql(salary);\r",
											"            pm.expect(item.gross).not.null;\r",
											"            pm.expect(item.gross).to.be.an(\"number\");\r",
											"            pm.expect(item.gross).to.eql(gross);\r",
											"            pm.expect(item.benefitsCost).not.null;\r",
											"            pm.expect(item.benefitsCost).to.be.an(\"number\");\r",
											"\r",
											"            var dependants = item.dependants;\r",
											"            var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"            //pm.expect(item.benefitsCost).to.equals(parseFloat(benefitsCost));\r",
											"\r",
											"            pm.expect(item.net).not.null;\r",
											"            pm.expect(item.net).to.be.a(\"number\");\r",
											"\r",
											"            var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"            pm.expect(item.net).to.equals(parseFloat(net));\r",
											"        });\r",
											"    }\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"packages": {},
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Get Employee List - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{Invalidtoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee List - empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee List - Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee List - Invalid http method",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 405\", function () {\r",
											"    pm.response.to.have.status(405);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Add Employee",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"firstName\");\r",
											"    let lastName = pm.environment.get(\"lastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.dependants).to.eql(dependants);\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee without dependants",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.dependants).to.eql(0);\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee with zero dependants",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.dependants).to.eql(0);\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee with 32 dependants",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.dependants).to.eql(32);\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 32\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Add Employee - Empty firstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The FirstName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - Missing firstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The FirstName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - firstName greater than 50 chars",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field FirstName must be a string with a maximum length of 50.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"abcdefglmo1234567890abcdefglmo1234567890abcdefglmo1\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - Empty lastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The LastName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - Missing lastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The LastName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - lastName greater than 50 chars",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field LastName must be a string with a maximum length of 50.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"abcdefglmo1234567890abcdefglmo1234567890abcdefglmo1\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - dependants less than zero",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"Dependants\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field Dependants must be between 0 and 32.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": -1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - dependants greater than 32",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"Dependants\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field Dependants must be between 0 and 32.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 33\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - Invalid token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{Invalidtoken}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - empty token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Employee - Without token",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": {{dependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get Employee",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"firstName\");\r",
											"    let lastName = pm.environment.get(\"lastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"\r",
											"    pm.environment.set(\"id\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"firstName\");\r",
											"    let lastName = pm.environment.get(\"lastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/{{id}}",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative Copy",
					"item": [
						{
							"name": "Get Employee - Non existing Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/b6ef7bc7-bfb9-4884-909d-b54c1748b000",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"b6ef7bc7-bfb9-4884-909d-b54c1748b000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee - Invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{Invalidtoken}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/{{id}}",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee - empty token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/{{id}}",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Employee - Without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/{{id}}",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"{{id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update Employee",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"firstName\");\r",
											"    let lastName = pm.environment.get(\"lastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"\r",
											"    pm.environment.set(\"id\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"newFirstName\");\r",
											"    let lastName = pm.environment.get(\"newLastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"newDependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "Update Employee - Non existing Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"b6ef7bc7-bfb9-4884-909d-b54c1748b000\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Empty Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Missing Id",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Empty firstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The FirstName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Missing firstName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The FirstName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - firstName greater than 50",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"FirstName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field FirstName must be a string with a maximum length of 50.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"abcdefglmo1234567890abcdefglmo1234567890abcdefglmo1\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Empty lastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The LastName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - Missing lastName",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The LastName field is required.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - lastName greater than 50",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"LastName\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field LastName must be a string with a maximum length of 50.');\r",
											"\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"abcdefglmo1234567890abcdefglmo1234567890abcdefglmo1\",\r\n    \"dependants\": {{newDependants}}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - dependants less than zero",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"Dependants\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field Dependants must be between 0 and 32.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": -1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Employee - dependants greater than 32",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var newDependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"newFirstName\", newFirstName);\r",
											"pm.environment.set(\"newLastName\", newLastName);\r",
											"pm.environment.set(\"newDependants\", newDependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].memberNames[0]).to.eql(\"Dependants\");\r",
											"    pm.expect(jsonData[0].errorMessage).to.eql('The field Dependants must be between 0 and 32.');\r",
											"\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": 33\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete Employee",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "Add Employee",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
											"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
											"var dependants = Math.floor(Math.random() * 10) + 1;\r",
											"pm.environment.set(\"firstName\", firstName);\r",
											"pm.environment.set(\"lastName\", lastName);\r",
											"pm.environment.set(\"dependants\", dependants);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Validate Response Body\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
											"    let firstName = pm.environment.get(\"firstName\");\r",
											"    let lastName = pm.environment.get(\"lastName\");\r",
											"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
											"\r",
											"    pm.expect(jsonData.partitionKey).not.null;\r",
											"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.sortKey).not.null;\r",
											"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.username).not.null;\r",
											"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.id).not.null;\r",
											"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).not.null;\r",
											"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
											"    pm.expect(jsonData.lastName).not.null;\r",
											"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
											"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
											"    pm.expect(jsonData.dependants).not.null;\r",
											"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).not.null;\r",
											"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.salary).to.eql(salary);\r",
											"    pm.expect(jsonData.gross).not.null;\r",
											"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.gross).to.eql(gross);\r",
											"    pm.expect(jsonData.benefitsCost).not.null;\r",
											"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
											"    pm.expect(jsonData.net).not.null;\r",
											"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
											"});\r",
											"\r",
											"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
											"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
											"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
											"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
											"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
											"    var jsonData = pm.response.json();\r",
											"    var dependants = jsonData.dependants;\r",
											"\r",
											"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
											"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
											"\r",
											"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
											"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
											"\r",
											"    pm.environment.set(\"id\",jsonData.id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 1\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{domain}}{{resource}}",
									"host": [
										"{{domain}}{{resource}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employee",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/{{id}}",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"{{id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Employee - Non existing Id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic {{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{domain}}{{resource}}/b6ef7bc7-bfb9-4884-909d-b54c1748b000",
									"host": [
										"{{domain}}{{resource}}"
									],
									"path": [
										"b6ef7bc7-bfb9-4884-909d-b54c1748b000"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": []
				}
			]
		},
		{
			"name": "E2E",
			"item": [
				{
					"name": "Add Employee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var firstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"var lastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
									"var dependants = Math.floor(Math.random() * 10) + 1;\r",
									"pm.environment.set(\"firstName\", firstName);\r",
									"pm.environment.set(\"lastName\", lastName);\r",
									"pm.environment.set(\"dependants\", dependants);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Response Body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
									"    let firstName = pm.environment.get(\"firstName\");\r",
									"    let lastName = pm.environment.get(\"lastName\");\r",
									"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
									"\r",
									"    pm.expect(jsonData.partitionKey).not.null;\r",
									"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sortKey).not.null;\r",
									"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.username).not.null;\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).not.null;\r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).not.null;\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
									"    pm.expect(jsonData.lastName).not.null;\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
									"    pm.expect(jsonData.dependants).not.null;\r",
									"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).not.null;\r",
									"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).to.eql(salary);\r",
									"    pm.expect(jsonData.gross).not.null;\r",
									"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.gross).to.eql(gross);\r",
									"    pm.expect(jsonData.benefitsCost).not.null;\r",
									"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.net).not.null;\r",
									"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
									"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
									"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
									"    var jsonData = pm.response.json();\r",
									"    var dependants = jsonData.dependants;\r",
									"\r",
									"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
									"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
									"\r",
									"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
									"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
									"\r",
									"    pm.environment.set(\"id\",jsonData.id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"firstName\": \"{{firstName}}\",\r\n    \"lastName\": \"{{lastName}}\",\r\n    \"dependants\": 1\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{resource}}",
							"host": [
								"{{domain}}{{resource}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee - After add employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Response Body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
									"    let firstName = pm.environment.get(\"firstName\");\r",
									"    let lastName = pm.environment.get(\"lastName\");\r",
									"    let dependants = parseInt(pm.environment.get(\"dependants\"));\r",
									"\r",
									"    pm.expect(jsonData.partitionKey).not.null;\r",
									"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sortKey).not.null;\r",
									"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.username).not.null;\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).not.null;\r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).not.null;\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
									"    pm.expect(jsonData.lastName).not.null;\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
									"    pm.expect(jsonData.dependants).not.null;\r",
									"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).not.null;\r",
									"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).to.eql(salary);\r",
									"    pm.expect(jsonData.gross).not.null;\r",
									"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.gross).to.eql(gross);\r",
									"    pm.expect(jsonData.benefitsCost).not.null;\r",
									"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.net).not.null;\r",
									"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
									"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
									"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
									"    var jsonData = pm.response.json();\r",
									"    var dependants = jsonData.dependants;\r",
									"\r",
									"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
									"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
									"\r",
									"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
									"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}{{resource}}/{{id}}",
							"host": [
								"{{domain}}{{resource}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Employee",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var newFirstName = pm.variables.replaceIn('{{$randomFirstName}}');\r",
									"var newLastName = pm.variables.replaceIn('{{$randomLastName}}');\r",
									"var newDependants = 2;\r",
									"pm.environment.set(\"newFirstName\", newFirstName);\r",
									"pm.environment.set(\"newLastName\", newLastName);\r",
									"pm.environment.set(\"newDependants\", newDependants);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Response Body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
									"    let firstName = pm.environment.get(\"newFirstName\");\r",
									"    let lastName = pm.environment.get(\"newLastName\");\r",
									"    let dependants = parseInt(pm.environment.get(\"newDependants\"));\r",
									"\r",
									"    pm.expect(jsonData.partitionKey).not.null;\r",
									"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sortKey).not.null;\r",
									"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.username).not.null;\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).not.null;\r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).not.null;\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.eql(firstName);\r",
									"    pm.expect(jsonData.lastName).not.null;\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.eql(lastName);\r",
									"    pm.expect(jsonData.dependants).not.null;\r",
									"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).not.null;\r",
									"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).to.eql(salary);\r",
									"    pm.expect(jsonData.gross).not.null;\r",
									"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.gross).to.eql(gross);\r",
									"    pm.expect(jsonData.benefitsCost).not.null;\r",
									"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.net).not.null;\r",
									"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
									"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
									"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
									"    var jsonData = pm.response.json();\r",
									"    var dependants = jsonData.dependants;\r",
									"\r",
									"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
									"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
									"\r",
									"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
									"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{id}}\",\r\n    \"firstName\": \"{{newFirstName}}\",\r\n    \"lastName\": \"{{newLastName}}\",\r\n    \"dependants\": {{newDependants}}\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{domain}}{{resource}}",
							"host": [
								"{{domain}}{{resource}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee - After update employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Validate Response Body\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let salary = parseInt(pm.environment.get(\"salary\"));\r",
									"    let newFirstName = pm.environment.get(\"newFirstName\");\r",
									"    let newLastName = pm.environment.get(\"newLastName\");\r",
									"    let  newDependants = parseInt(pm.environment.get(\"newDependants\"));\r",
									"\r",
									"    pm.expect(jsonData.partitionKey).not.null;\r",
									"    pm.expect(jsonData.partitionKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.sortKey).not.null;\r",
									"    pm.expect(jsonData.sortKey).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.username).not.null;\r",
									"    pm.expect(jsonData.username).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.id).not.null;\r",
									"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).not.null;\r",
									"    pm.expect(jsonData.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.firstName).to.eql(newFirstName);\r",
									"    pm.expect(jsonData.lastName).not.null;\r",
									"    pm.expect(jsonData.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.lastName).to.eql(newLastName);\r",
									"    pm.expect(jsonData.dependants).not.null;\r",
									"    pm.expect(jsonData.dependants).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.dependants).to.eql(newDependants);\r",
									"    pm.expect(jsonData.salary).not.null;\r",
									"    pm.expect(jsonData.salary).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.salary).to.eql(salary);\r",
									"    pm.expect(jsonData.gross).not.null;\r",
									"    pm.expect(jsonData.gross).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.gross).to.eql(gross);\r",
									"    pm.expect(jsonData.benefitsCost).not.null;\r",
									"    pm.expect(jsonData.benefitsCost).to.be.an(\"number\");\r",
									"    pm.expect(jsonData.net).not.null;\r",
									"    pm.expect(jsonData.net).to.be.a(\"number\");\r",
									"});\r",
									"\r",
									"pm.test(\"Validate benefitsCost and net Calculation\", function () {\r",
									"    let gross = parseInt(pm.environment.get(\"gross\"));\r",
									"    let costOfBenefits = parseInt(pm.environment.get(\"costOfBenefits\"));\r",
									"    let payChecks = parseInt(pm.environment.get(\"payChecks\"));\r",
									"    let dependentCost = parseInt(pm.environment.get(\"dependentCost\"));\r",
									"    var jsonData = pm.response.json();\r",
									"    var dependants = jsonData.dependants;\r",
									"\r",
									"    var benefitsCost = ((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants)).toFixed(5);\r",
									"    pm.expect(jsonData.benefitsCost).to.equals(parseFloat(benefitsCost));;\r",
									"\r",
									"    var net = (gross-((costOfBenefits/payChecks)+((dependentCost/payChecks)*dependants))).toFixed(4);\r",
									"    pm.expect(jsonData.net).to.equals(parseFloat(net));\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}{{resource}}/{{id}}",
							"host": [
								"{{domain}}{{resource}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}{{resource}}/{{id}}",
							"host": [
								"{{domain}}{{resource}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Employee",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {\r",
									"    pm.response.to.have.status(404);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic {{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{domain}}{{resource}}/{{id}}",
							"host": [
								"{{domain}}{{resource}}"
							],
							"path": [
								"{{id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}